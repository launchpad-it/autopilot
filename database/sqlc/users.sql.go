// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"
)

const insertUser = `-- name: InsertUser :exec
insert into users (id) values ($1)
`

func (q *Queries) InsertUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, insertUser, id)
	return err
}

const resetUser = `-- name: ResetUser :exec
update users set
    state = $2,
    state_dump = null,
    profile = null,
    resume = null,
    resume_file = null
where id = $1
`

type ResetUserParams struct {
	ID    int64  `json:"id"`
	State string `json:"state"`
}

func (q *Queries) ResetUser(ctx context.Context, arg ResetUserParams) error {
	_, err := q.db.Exec(ctx, resetUser, arg.ID, arg.State)
	return err
}

const updateUserProfile = `-- name: UpdateUserProfile :exec
update users set profile = $2 where id = $1
`

type UpdateUserProfileParams struct {
	ID      int64  `json:"id"`
	Profile []byte `json:"profile"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error {
	_, err := q.db.Exec(ctx, updateUserProfile, arg.ID, arg.Profile)
	return err
}

const updateUserResume = `-- name: UpdateUserResume :exec
update users set resume = $2, resume_file = $3 where id = $1
`

type UpdateUserResumeParams struct {
	ID         int64  `json:"id"`
	Resume     []byte `json:"resume"`
	ResumeFile []byte `json:"resume_file"`
}

func (q *Queries) UpdateUserResume(ctx context.Context, arg UpdateUserResumeParams) error {
	_, err := q.db.Exec(ctx, updateUserResume, arg.ID, arg.Resume, arg.ResumeFile)
	return err
}

const updateUserState = `-- name: UpdateUserState :exec
update users set state = $2, state_dump = $3 where id = $1
`

type UpdateUserStateParams struct {
	ID        int64  `json:"id"`
	State     string `json:"state"`
	StateDump []byte `json:"state_dump"`
}

func (q *Queries) UpdateUserState(ctx context.Context, arg UpdateUserStateParams) error {
	_, err := q.db.Exec(ctx, updateUserState, arg.ID, arg.State, arg.StateDump)
	return err
}

const user = `-- name: User :one
select created_at, id, state, state_dump, profile, resume, resume_file from users where id = $1
`

func (q *Queries) User(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, user, id)
	var i User
	err := row.Scan(
		&i.CreatedAt,
		&i.ID,
		&i.State,
		&i.StateDump,
		&i.Profile,
		&i.Resume,
		&i.ResumeFile,
	)
	return i, err
}

const userExists = `-- name: UserExists :one
select exists(select 1 from users where id = $1)
`

func (q *Queries) UserExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, userExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const usersByState = `-- name: UsersByState :many
select created_at, id, state, state_dump, profile, resume, resume_file from users where state = $1
`

func (q *Queries) UsersByState(ctx context.Context, state string) ([]User, error) {
	rows, err := q.db.Query(ctx, usersByState, state)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.CreatedAt,
			&i.ID,
			&i.State,
			&i.StateDump,
			&i.Profile,
			&i.Resume,
			&i.ResumeFile,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
