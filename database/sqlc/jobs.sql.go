// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: jobs.sql

package sqlc

import (
	"context"
	"time"
)

const insertJob = `-- name: InsertJob :exec
insert into jobs (
    id,
    source,
    published_at,
    link,
    title,
    description,
    ai_company,
    ai_role,
    ai_seniority,
    ai_overview,
    ai_hashtags
) values (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11
)
`

type InsertJobParams struct {
	ID          string     `json:"id"`
	Source      string     `json:"source"`
	PublishedAt *time.Time `json:"published_at"`
	Link        string     `json:"link"`
	Title       string     `json:"title"`
	Description string     `json:"description"`
	CompanyAI   string     `json:"ai_company"`
	RoleAI      string     `json:"ai_role"`
	SeniorityAI string     `json:"ai_seniority"`
	OverviewAI  string     `json:"ai_overview"`
	HashtagsAI  []string   `json:"ai_hashtags"`
}

func (q *Queries) InsertJob(ctx context.Context, arg InsertJobParams) error {
	_, err := q.db.Exec(ctx, insertJob,
		arg.ID,
		arg.Source,
		arg.PublishedAt,
		arg.Link,
		arg.Title,
		arg.Description,
		arg.CompanyAI,
		arg.RoleAI,
		arg.SeniorityAI,
		arg.OverviewAI,
		arg.HashtagsAI,
	)
	return err
}

const jobsExist = `-- name: JobsExist :many
select id from jobs where id = any($1)
`

func (q *Queries) JobsExist(ctx context.Context, ids []string) ([]string, error) {
	rows, err := q.db.Query(ctx, jobsExist, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
